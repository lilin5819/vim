"color ir_black
"color molokai
"color peaksea
let g:airline_theme = 'simple'
"let g:airline_theme = 'tomorrow'

hi Comment ctermfg=70
hi Normal ctermfg=50
"set nospell
"set cursorline         "当前行下划线
set cursorcolumn        "当前光标竖条

"--------------------------YouCompleteMe--------------------------------
let g:acp_enableAtStartup = 1
let g:UltiSnipsExpandTrigger = '<C-k>'
let g:UltiSnipsJumpForwardTrigger = '<C-k>'
let g:UltiSnipsJumpBackwardTrigger = '<C-j>'

"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"let g:UltiSnipsEditSplit="vertical"
set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)

let g:ycm_confirm_extra_conf=0
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
"let g:ycm_global_ycm_extra= '/home/lilin/vimzsh/ycm_extra_conf.py'
let g:ycm_global_ycm_extra= '/usr/lib/ycmd/ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tag_files = 1 "使用ctags生成的tags文件--------------------------------------------------------------------

" 输入第 2 个字符开始补全

let g:ycm_min_num_of_chars_for_completion= 1

" 禁止缓存匹配项,每次都重新生成匹配项

let g:ycm_cache_omnifunc=1

" 开启语义补全

let g:ycm_seed_identifiers_with_syntax= 1

"在注释输入中也能补全

let g:ycm_complete_in_comments = 1

"在字符串输入中也能补全

let g:ycm_complete_in_strings = 1

let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'nerdtree' : 1,
\}



nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"----------------------cscope---------------------
if filereadable("cscope.out") 
        cs add cscope.out 
    endif

"---------------------------C-head-------------------------------------

"let g:C_MapLeader=';'
"let g:C_Ctrl_j= 'off'
"let g:C_Ctrl_j_mode='i'




autocmd BufNewFile *.[ch],*.hpp,*.cpp,*.java,*.sh exec ":call SetTitle()"

"加入注释
func SetComment()
    call setline(1,"/*===============================================================")
    call append(line("."),   "*   Copyright (C) ".strftime("%Y")." All rights reserved.")
    call append(line(".")+1, "*")
    call append(line(".")+2, "*   文件名称：".expand("%:t"))
    call append(line(".")+3, "*   创 建 者：杨礼林")
    call append(line(".")+4, "*   邮    箱：1657301947@qq.com")
    call append(line(".")+5, "*   创建日期：".strftime("%Y年%m月%d日 %H:%M"))
    call append(line(".")+6, "*   描    述：")
    call append(line(".")+7, "*")
    call append(line(".")+8, "*   更新日志：")
    call append(line(".")+9, "*")
    call append(line(".")+10, "================================================================*/")
 endfunc

 "定义函数SetTitle，自动插入文件头
 func SetTitle()
     call SetComment()
     if expand("%:e") == 'hpp'
  call append(line(".")+11, "#ifndef _".toupper(expand("%:t:r"))."_H")
  call append(line(".")+12, "#define _".toupper(expand("%:t:r"))."_H")
  call append(line(".")+13, "#ifdef __cplusplus")
  call append(line(".")+14, "extern \"C\"")
  call append(line(".")+15, "{")
  call append(line(".")+16, "#endif")
  call append(line(".")+17, "")
  call append(line(".")+18, "#ifdef __cplusplus")
  call append(line(".")+19, "}")
  call append(line(".")+20, "#endif")
  call append(line(".")+21, "#endif //".toupper(expand("%:t:r"))."_H")
     elseif expand("%:e") == 'h'
  "call append(line(".")+10, "#pragma once")
  call append(line(".")+11, "#ifndef _".toupper(expand("%:t:r"))."_H")
  call append(line(".")+12, "#define _".toupper(expand("%:t:r"))."_H")
  call append(line(".")+13, "")
  call append(line(".")+14,"#include \<stdio.h\>")
  call append(line(".")+15, "")
  call append(line(".")+16, "#endif /*----_".toupper(expand("%:t:r"))."_H-----*/")
     elseif &filetype == 'c'
  call append(line(".")+11,"#include \"".expand("%:t:r").".h\"")
     elseif &filetype == 'cpp'
  call append(line(".")+11, "#include \"".expand("%:t:r").".h\"")
     endif
 endfunc})

" 最后修改时间
"function SetLastModifiedTime(lineno)  
"        let modif_time = strftime("%c")  
"        if a:lineno == "-1"  
"                let line = getline(6)  
"        else  
"                let line = getline(a:lineno)  
"        endif      
"        if line =~ '^\#\s*\S*   最后修改：\S*.*$'  
"                let line = substitute( line,':\s\+.*\d\{4\}', ':'.modif_time, "" )  
"        else  
"                let line = '*   最后修改: '.modif_time  
"        endif  
"        if a:lineno == "-1"  
"                call setline(5, line)  
"        else  
"                call append(a:lineno, line)  
"        endif  
"endfunction  
"  
"" map the SetLastModifiedTime command automatically  
"au BufWrite *.py,*.java call SetLastModifiedTime(-1) 
"au BufWrite *.c,*.cpp,*.h,*.hpp call SetLastModifiedTime(8) 
"---------------------------------------------------------------------
